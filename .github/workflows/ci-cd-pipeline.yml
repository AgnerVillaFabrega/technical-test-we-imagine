name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Descargar el código del repositorio
      - name: Check out the code
        uses: actions/checkout@v4

      # Paso 2: Configurar la versión de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn' # Cachea las dependencias de Yarn para mejorar tiempos

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Paso 4: Compilar la aplicación
      - name: Build the application
        run: yarn build

      # Paso 5: Verificar la salida del build
      - name: List build directory
        run: ls -l dist

  test-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Deshabilitar shallow clone para mejorar los reportes

      # Paso 2: Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: yarn install

      # Paso 4: Ejecutar pruebas unitarias y generar reporte de cobertura
      - name: Run tests
        run: yarn test --coverage
        env:
          CI: true

      # Paso 5: Configurar SonarQube Scanner
      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=src/**/*.spec.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.verbose=true
  
