name: CICD
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Descargar el c贸digo del repositorio
      - name: Check out the code
        uses: actions/checkout@v4

      # Paso 2: Configurar la versi贸n de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
        working-directory: ./step-1

      # Paso 4: Compilar la aplicaci贸n
      - name: Build the application
        run: yarn build
        working-directory: ./step-1

      # Paso 5: Verificar la salida del build
      - name: List build directory
        run: ls -l dist
        working-directory: ./step-1

      # Paso 6: Ejecutar pruebas unitarias
      - name: Run unit tests
        run: yarn test --coverage
        working-directory: ./step-1
        env:
          CI: true

      # Paso 7: Ejecutar pruebas E2E
      - name: Run E2E tests
        run: yarn test:e2e
        working-directory: ./step-1/test
        env:
          CI: true

      # Paso 8: Configurar SonarQube Scanner y exportar resultados
      # - name: Run SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v4.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=agnervillafabrega-technical-test-we-imagine
      #       -Dsonar.sources=step-1/src
      #       -Dsonar.tests=step-1/test
      #       -Dsonar.test.inclusions=step-1/src/**/*.spec.ts
      #       -Dsonar.typescript.lcov.reportPaths=step-1/coverage/lcov.info
      #       -Dsonar.verbose=true

      # Paso 9: Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }} .
        working-directory: ./step-1

      # Paso 10: Iniciar sesi贸n en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 11: Subir la imagen al Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}
